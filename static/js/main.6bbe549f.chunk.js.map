{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["weatherCard","weatherData","className","Card","id","Body","Title","name","Math","round","main","temp","weather","temp_max","temp_min","Date","sys","sunrise","toLocaleTimeString","feels_like","sunset","humidity","wind","speed","visibility","pressure","description","toUpperCase","moment","format","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bbe549f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n\r\nconst weatherCard = ({weatherData}) => (\r\n    <div className=\"container\">\r\n    <Card id=\"weather-card\">\r\n        <Card.Body>\r\n            <Card.Title><p className=\"city\" id=\"weather-info\">{weatherData.name}</p></Card.Title>\r\n            <p className=\"temp\" id=\"weather-info\">{Math.round(weatherData.main.temp)}&deg;F</p>\r\n            <p className=\"description\" id=\"weather-info\">{weatherData.weather[0].main}</p>\r\n            <div className=\"row-1\">\r\n                <p className=\"high-temp\" id=\"weather-info\"><span>H: </span>{Math.round(weatherData.main.temp_max)}&deg;</p>\r\n                <p className=\"low-temp\" id=\"weather-info\"><span>L: </span>{Math.round(weatherData.main.temp_min)}&deg;</p>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"row-2\">\r\n                <p className=\"s-rise\" id=\"weather-info\"><span id=\"stack-info\">SUNRISE</span>{new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-US')}</p>\r\n                <p className=\"real-feel\" id=\"weather-info\"><span id=\"stack-info\">FEELS LIKE</span>{Math.round(weatherData.main.feels_like)}&deg;F</p>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"row-3\">\r\n                <p className=\"s-set\" id=\"weather-info\"><span id=\"stack-info\">SUNSET</span>{new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-US')}</p>\r\n                <p className=\"humid\" id=\"weather-info\"><span id=\"stack-info\">HUMIDITY</span>{weatherData.main.humidity}%</p>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"row-4\">\r\n                <p className=\"wind\" id=\"weather-info\"><span id=\"stack-info\">WIND</span>{Math.round(weatherData.wind.speed)} mph</p>\r\n                <p className=\"visible\" id=\"weather-info\"><span id=\"stack-info\">VISIBILITY</span>{weatherData.visibility} yd</p>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"row-5\">\r\n                <p className=\"pressure\" id=\"weather-info\"><span id=\"stack-info\">PRESSURE</span>{weatherData.main.pressure} inHg</p>\r\n                <p className=\"description\" id=\"weather-info\"><span id=\"stack-info\">DESCRIPTION</span>{weatherData.weather[0].description.toUpperCase()}</p>\r\n            </div>\r\n            <p className=\"date\" id=\"weather-info\">{moment().format('LLLL')}</p>\r\n        </Card.Body>\r\n    </Card>\r\n    </div>\r\n  )\r\n  \r\n  export default weatherCard;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import CitySearch from './components/citysearch'\n// import UseFetch from './components/useFetch'\n\nfunction App() {\n  // const {searchData, setUrl} = UseFetch();\n  // console.log(searchData);\n  //const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${process.env.REACT_APP_API_KEY}&units=imperial`;\n\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=imperial&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    fetchData();\n  }, [lat,long]);\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"title-header\">Weather App</h1>\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}